apiVersion: v1
kind: Namespace
metadata:
  name: ns1
  labels:
    core.juniper.net/isolated-namespace: "true"
    ns: ns1
---
apiVersion: core.contrail.juniper.net/v1alpha1
kind: Subnet
metadata:
  namespace: ns1
  name: subnet1
  annotations:
    core.juniper.net/display-name: subnet1
spec:
  cidr: "10.0.0.0/24"
  defaultGateway: 10.0.0.1
---
apiVersion: core.contrail.juniper.net/v1alpha1
kind: VirtualNetwork
metadata:
  namespace: ns1
  name: vn1
  annotations:
    core.juniper.net/display-name: vn1
  labels:
    vn: vn1
spec:
  v4SubnetReference:
    apiVersion: core.contrail.juniper.net/v1alpha1
    kind: Subnet
    namespace: ns1
    name: subnet1
---
apiVersion: core.contrail.juniper.net/v1alpha1
kind: Subnet
metadata:
  namespace: kubemanager-cluster2-cluster2-ns1
  name: subnet2
  annotations:
    core.juniper.net/display-name: subnet2
spec:
  cidr: "20.0.0.0/24"
  defaultGateway: 20.0.0.1
---
apiVersion: core.contrail.juniper.net/v1alpha1
kind: VirtualNetwork
metadata:
  namespace: kubemanager-cluster2-cluster2-ns1
  name: vn2
  annotations:
    core.juniper.net/display-name: vn2
  labels:
    vn: vn2
spec:
  v4SubnetReference:
    apiVersion: core.contrail.juniper.net/v1alpha1
    kind: Subnet
    namespace: kubemanager-cluster2-cluster2-ns1
    name: subnet2
---
apiVersion: core.contrail.juniper.net/v1alpha1
kind: VirtualNetworkRouter
metadata:
  namespace: ns1
  name: vnr1
  annotations:
    core.juniper.net/display-name: vnr1
  labels:
    vnr: vnr1
spec:
  type: mesh
  virtualNetworkSelector:
    matchLabels:
      vn: vn1
  import:
    virtualNetworkRouters:
      - virtualNetworkRouterSelector:
          matchLabels:
            vnr: vnr2
        namespaceSelector:
          matchLabels:
            ns: cluster2-ns1
---
apiVersion: core.contrail.juniper.net/v1alpha1
kind: VirtualNetworkRouter
metadata:
  namespace: kubemanager-cluster2-cluster2-ns1
  name: vnr2
  annotations:
    core.juniper.net/display-name: vnr2
  labels:
    vnr: vnr2
spec:
  type: mesh
  virtualNetworkSelector:
    matchLabels:
      vn: vn2
  import:
    virtualNetworkRouters:
      - virtualNetworkRouterSelector:
          matchLabels:
            vnr: vnr1
        namespaceSelector:
          matchLabels:
            ns: ns1
---
apiVersion: v1
kind: Pod
metadata:
  name: centos1
  namespace: ns1
  annotations:
    k8s.v1.cni.cncf.io/networks: ns1/vn1
spec:
  containers:
  - name: centos1
    image: docker.io/centos
    command: [ "/bin/bash", "-c" ]
    args:
      - ip route del default;
        ip route add default via 10.0.0.1;
        sleep infinity;
    securityContext:
      privileged: true
      capabilities:
        add:
          - NET_ADMIN
